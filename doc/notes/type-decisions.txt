Notes on the type system.
=========================

2007-Sep-09
-----------

NO DAMN TUPLES

Decided against transparent tuple and union types. There is already
enough machinery to do heterogeneous sums and unions with recs. Tuples
tend to only grow to 2 or 3 before they're a programmer hazard
anyways, and tup[int,float] is not much different than pair[int,float]
where pair is a library module alias for tup2[a,b]. We can probably
define tupN up to 9 and be done with it.

Likewise for unions, it's rare to usefully union anything other than a
pair of things or "anything". We need a separate dyn for "anything"
and a pair-union we can do with either[a,b]. In a pinch,
either3[a,b,c].

There is too much supporting syntax and structural/nominal baggage,
and it's too tempting to get into destructuring assignment in order to
"pick apart and name" the parts of a tuple. Neither of these are
desirable. You get field names with records.

There was an earlier thought about keeping tuples around for handling
polymorphic apply, but I decided this is not really a problem. You can
do apply in terms of a nested type associated with the function type:
the arg-record type. It's the "call message" from hermes. Same thing.

DATA AND TYPE

*Did* decide to split rec and alt into "data" declarations (not
"type") such that nominal types ( / ML style data constructors) are
introduced with "data" and transparent types with "type". Type
expressions as we might see in a type parameter list can only use
transparent type stuff, or name data types by name; rec and alt
declarations are not legal in type expressions. This helps clarify
several use contexts of type expressions.

LITERALS AND NEW

A primary example is that these are all valid "new" expressions:

 new foo { a=b, c=d }        // where foo is a rec data type
 new func(int a) -> b { ... } 
 new vec[int] { 1, 2, 3 }

But this, in particular, is not!

 // Butt-ugly, wrong, and incomparable with rec foo!
 new rec {int a; int c;} { a = b, c = d }  // NO!

 // Do this instead
 data foo = rec { int a, int c }
 new foo { a = b, c = d }


NO WAIT, WE NEED TUPLES

Crap. I've gone back and forth on tuples so many times my head is
getting dizzy. Here is a possible reason we need tuples. The possible
reason is that a function that looks like it's of type (int,int)->int
is supposed to be compatible with any other function of that type,
not just those that *name the args the same way*

If we associate an arg record with a function, and say the function is
"really" from x->y where x is the arg record and y is the return
record, we're really saying "records are structurally comparable". But
we don't want them to be! We want record types x and y to be
incompatible since x is a different name than y.

I think this might be a clincher. 

*Sigh* ok.

Earlier I was thinking of a "stripped down" set of rules given the
notion of tuples: give up on parameter passing modes entirely and
imply it all from limitation. I think we may still be ok with
that. There was a corner case -- a single limited function arg with a
single non-limited slot you *don't* want to move in -- but I can
imagine a few possible solutions to that:

  1. limited implies move-in-and-out, not just move-in. Possible, but
     also a little sticky; you have to move an option in if you 
     want the function to consume the arg and not give it back. Bleah.

  2. maybe the problem is imaginary. limited implies move-in only if
     the arg is still an lval during tuple-expression evaluation. If
     it's any other sort of lval, we evaluate fully to an rval,
     meaning we've already copied from the lval into a temp slot and 
     we've simply going to move the *temp slot* into the function and
     back. 
     
     but no, that's a little muddled. Evaluating an expression on the
     RHS of a move should produce an lval -- in fact it's
     syntactically restricted to an lval -- but on the sides of a binary
     "," operator or inside a 1-ary function param list, maybe it 
     should produce an lval as well? tricky. lvals as anything other 
     than syntactic categories are js "REFs", which are a little bogus.

     the central problem is that we have no 1-ary tuple type, and it's 
     odd or possibly silly to even propose one (what, parens?)

Another possibility is to give up on the "no param modes, just use 
limitation and build expressions" argument, and say the following:

   There's an argument tuple. Tuples are denoted tup[p,q,r]. The arg
   tuple is not built by the commas in the arg list. It's built by the
   call binding code analyzing the param passing modes and copying or
   moving stuff into the tuple, then moving the tuple, then copying or
   moving stuff out into the result scope, then repeating on the way
   back.

Yeah. That's probably what we're going to have to do. If we're going
to do that, maybe we should support an sum[p,q,r] transparent union as
well?

Or alternatively, we could spell tup[p,q,r] as "rec[p,q,r]" since rec
is a prohibited keyword in type expressions the rest of the time, and
we could spell mix[p,q,r] as "alt[p,q,r]". Then we could call the
former "anonymous records" and the latter "anonymous alternatives".

Ooh, shivers! I like this. It has a nice ... orthogonality!

Though actually, using "tup" and "sum" might be better. Gives the
concepts words. They're really different concepts (and nested anys
may in fact normalize out...)

ok, WE HAVE TUPLES BUT THEY ARE CALLED TUP[A,B,C] AND THEY DO NOT INVOLVE
THE BINARY COMMA "OPERATOR" OR SUCH NONSENSE, AND WE STILL NEED CODE TO
ANALYZE PARAMETER MODES


2007-Sep-10
-----------

Curious. Is alt really that different than sum? consider:

  rec nodefoo { ... }
  rec nodebar { ... }

  
  type node = alt[nodefoo, nodebar];
  node x <- rec nodefoo { ... };

Well, consider instead the notion of encoding some semantic meaning
in the constructors. Say you were trying to differentiate centigrade from
fahrenheit. 

alt temp { dec fahr;
           dec cent; }

you can construct new temp instances, say, like so:

 temp x = temp.fahr(10.0);

now let's look at how you replicate this without 

rec fahr { dec degrees }
rec cent { dec degrees }
type temp = alt[fahr, cent];

temp x = rec fahr { dec = 10.0 }

I think I'd prefer the ability to do the first. but I'll have to sleep
on it. damn.

2007-Sep-11
-----------

Sleep says: no anonymous sums. They're not useful enough to
justify. So then:

Declarations:

data foo = alt { int a; int b; }
data bar = rec { int x; int y; }

expressions:

foo p = foo.a(10);
bar q = bar { x = 10; y = 12; }

how do we syntactically select the second case? we've seen an lval; if
the lval is a name *and* the peek is '{', we accept it as a
record-constructor call. Otherwise it's a parse error. No 'new'.

foo.a(10) is a normal function call (to a function the system
generates for the type record foo). the alt-ness of foo is only
special in an alt stmt.

you get enums this way too:

data state = alt { running; stopped; }
state k = state.running;

'state.running' is a constant artifact, also allocated by the runtime. Again,
we differentiate a constant alt arm from a constructor alt arm

2007-Sep-14
-----------

although, sigh, if we permit bar { ... } as a form of expression,
we're not quite LL(1) anymore. Hm. yeah, we still are: we just define
the *grammar* as permitting lvals on the LHS and restrict the
*semantics* to say "only name lvals, not any old lvals". It still
parses as lvals, since names are a subset of lvals, and you don't need
to backtrack if you assume only lval.

also note: using state.running is no good; we want 'state' to refer to a 
data/type artifact, not a record full of functions. Let's adopt what MLs
do here and just say the constructors are unqualified functions / constants.

alt color { red, green, blue } 

means you can use unqualified 'red', 'green' and 'blue'
constants. Period. Then 'color' is a data/type, and color.foo are
various attributes of that type.

some exploration of protocols, constraints, 'plugs', and the relationship
between procs and progs.

One way is to say this:

  lim native proc;
  native prog;

  lim rec obj[PLUGS] { 
    proc self;
    prog code;
    PLUGS plugs;
  }

  plug canvas { 
       chan draw_rect(int x, int y, nat w, nat h) -> nil;
       chan clear() -> nil;
  }

  auto prog my_canvas(canvas) { 
    plug mycanv(canvas) {
      port draw_rect(int x, int y, nat w, nat h) -> nil {
        // blah blah.
      }
      port clear() -> nil {
        //
      }
    }
  }

  let my_canvas.ty cobj = my_canvas.new(x, y, z);
  let canvas c = cobj.plugs.mycanv;
  c.draw_rect(10, 10, 20, 20);

Various points: 
  - the prog p defines p.plug_ty and p.ty = obj[p.plug_ty]. you probably
    only ever have to refer to p.ty and p.new to instantiate one.
  - each plug name inside a prog must be unique, because they make up
    fields in the implicit 'plugs' record type associated with the prog.
  - if you don't use plug foo(bar) but just say plug foo, the plug is 
    called foo.
  - plug renaming is legal inside the prog using plug foo(bar) { ... }.
    so there is never any name collision during multiple-plug support.
  - plugs can be multiply-supported in a prog using plug foo2(bar) { ... }.
    this gives you a second bar plug, perhaps one that does debugging,
    or uses a different strategy, or is simply a newer version.
  - plugs can be delegated using "plug foo(bar) = other;" where other is
    a name of a plug found somewhere in the prog. 
  - plugs can be partially delegated using 
     "plug foo(bar) = other { .. exeception ports ... }"
    which is as close as we're going to come to supporting "inheritence"!