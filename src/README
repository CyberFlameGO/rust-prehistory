This is a very, very preliminary work-in-progress sort of snapshot of the Rust compiler.

Source layout:

boot/              The bootstrap compiler
boot/fe            - Front end (lexer, parser, AST)
boot/me            - Middle end (semantic checks, layout, IL, translation)
boot/be            - Back end (regalloc, insn selection, assembly, objfile emitter)
boot/util          - Ubiquitous helpers
boot/driver        - Compiler driver (command-line processing, pass-sequencing)

comp/              The self-hosted compiler (doesn't exist yet)
comp/*             - Same structure as in boot/

rt/                The runtime system
rt/rust.c          - The majority of the runtime services
rt/isaac           - The PRNG used for pseudo-random choices in the runtime
rt/bigint          - The bigint library used for the 'int' type
rt/uthash          - Small hashtable-and-list library for C, used in runtime

test/              Testsuite (for both bootstrap and self-hosted)
test/compile-fail  - Tests that should fail to compile
test/run-fail      - Tests that should compile, run and fail
test/run-pass      - Tests that should compile, run and succeed


Please be gentle, this is a part-time project, it's a bit of a mess.
