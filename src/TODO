
progress:
 - explicit FFI / struct descriptors; hard-coding offsets is getting stale
 - make proc stacks into chunk lists, check overflow / extend on frame entry
 - put timer-counter in proc
 - translate loop-jumps & calls to do a test/yield (regs already flushed)
 - make proc pool growable
 - basic version of type-state algorithm
 - real type checker, or extend resolve/unify? consult textbooks
 - movement of superword values
 - records
 - vectors
 - strings
 - channels and ports
 - emit typecode structure into crate (dwarf?)
 - typecode-driven generic copy fn
 - typecode-driven generic compare fn
 - typecode-driven generic hash fn
 - typecode-driven generic delete fn
 - typecode-driven generic fn 'ensure single ownership'
 - non-interior slot modes
 - mod types
 - alt/iso/idx types
 - parametric types
 - yielding calling protocols
 - tail calling protocols
 - mach-o format emitter
 - x64, arm?

code cleanup:
 - move frame code to ABI
 - put logging and error-handling context in elf, pe, x86
 - use a datatype for kernel function codes, not int numbers
 - use a datatype for fields inside each kernel C structure
 - move explicit code gen flags to ABI "pre digester" function
 - pass a crate pointer into the runtime rather than root prog
 - start crate structure real stupid: refcount + 1 function table
 - consolidate formatting functions
 - type-annotate everything
 - make callee-save in prologue/epilogue depend on reg use