stmts
-----

- new stmt
- alt stmt
- call-to-chan / send stmts
- foreach stmt / yield stmt
  - full suite of call protocols
  - move semantics on args / ret / yield

types
-----

- chan type
- vec type
- rec type
- alt type
- tup type
- pred type

- can probably ignore the quote type for now

general
-------

- arith and bit ops on mach types
- cache emitted code in each func
- interaction of chan events and scheduler
- standard library methods like fdopen, fdclose, readv, writev
- improve logging/tracing infrastructure
  - multiple tracing bits in per-proc tracing status word
  - also per-interp tracing word with own bits
  - turn on/off tracing "from userspace"  
- rework proc static scope chain: needs to be general to support
  closures
- create environment-capture-by-copying mechanism
- enforce limitation on loads (no copying)
- enforce slot constraints on loads and stores
  - enforce *acyclicality* of constraints!
- execute assertions
- infer typestate assertion points? hmm, maybe just build interference
  graph so that an actual write to a slot triggers rechecking of all 
  typestates that mention that slot...
  - prove this is actually sufficient!
- rudimentary crate-file support:
  - file modules to load, with fs mapping
  - dir modules containing, again with fs mapping
  - entry points
    - exec module.proc
    - test
  - probably ok to omit syntax extension for now
  - rework main.ml to take crate-file name and entry
  - can probably reuse / refactor lexer, put crate-file grammar in ll1parser.ml


bootstrapping
-------------

- define "opt" and "char opt" alt type (polymorphic! yikes)
- define a prog that makes a buffered, readable and peekable stream from a filename
- define a prog that uses that to make a readable and peekable token stream
- define a prog that uses that to make a parser