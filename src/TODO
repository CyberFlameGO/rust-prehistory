
progress:
 - remove limited type
 - remove COMP_idx
 - build signal system
 - extend typestate system to handle operation pre/post conditions
   extracted from implicit-in-type constrs
 - floating point values / registers / instructions
 - general memcpy-with-inlining-threshold trans function
 - explicit FFI / struct descriptors; hard-coding offsets is getting stale
   (use IL.referent_ty and friends)
 - make proc stacks into chunk lists, check overflow / extend on frame entry
 - put timer-counter in proc
 - translate loop-jumps & calls to do a test/yield (regs already flushed)
 - implement memory budget / accounting scheme
 - real type checker, or extend resolve/unify? consult textbooks
 - strings
 - emit typecode structure into crate (dwarf?)
 - typecode-driven generic copy fn
 - typecode-driven generic compare fn
 - typecode-driven generic hash fn
 - typecode-driven generic delete fn
 - typecode-driven generic fn 'ensure single ownership'
 - mod types
 - alt/iso/idx types
 - parametric types
 - yielding calling protocols
 - tail calling protocols
 - mach-o format emitter
 - x64, arm?
 - import extlib for utf-8, various extras
 - redo lexer by hand, as unicode

code cleanup:
 - move frame code to ABI
 - put logging and error-handling context in elf, pe, x86
 - use a datatype for fields inside each kernel C structure
 - move explicit code gen flags to ABI "pre digester" function
 - pass a crate pointer into the runtime rather than root prog
 - start crate structure real stupid: refcount + 1 function table
 - consolidate formatting functions
 - type-annotate everything
 - make callee-save in prologue/epilogue depend on reg use
 - once extlib imported, flush out redundancies in common
 - make all logging (or most) lazy
 - change ra to do destructive / in-place update of bitsets
 - change typestate algorithm to reschedule / revisit only downstream nodes
 - change relaxation code to ... possibly *batch* adjustments? hard to say; maybe
   have relaxation return a tri-state: "I fit" / "I do not" / "I might", and only
   batch the "I do not"s?

done:
 - vectors
 - vector bounds checking
 - implement refcounts on procs, chans, ports
 - channels and ports
 - basic version of type-state algorithm
 - movement of superword values
 - records
 - tuples
 - non-interior slot modes
 - use a datatype for kernel function codes, not int numbers
 - make proc pool growable
